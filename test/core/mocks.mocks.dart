// Mocks generated by Mockito 5.4.4 from annotations
// in crewmeister_frontend_coding_challenge/test/core/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:api/api.dart' as _i8;
import 'package:crewmeister_frontend_coding_challenge/core/error/failure.dart'
    as _i5;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/data/datasources/remote_data_source.dart'
    as _i9;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/data/models/absence_model.dart'
    as _i10;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/data/models/member_model.dart'
    as _i11;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/domain/entities/absence_entity.dart'
    as _i6;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/domain/entities/member_entity.dart'
    as _i7;
import 'package:crewmeister_frontend_coding_challenge/features/absence_manager/domain/repositories/absence_manager_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbsenceManagerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceManagerRepository extends _i1.Mock
    implements _i3.AbsenceManagerRepository {
  MockAbsenceManagerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.AbsenceEntity>>>
      fetchAbsences() => (super.noSuchMethod(
            Invocation.method(
              #fetchAbsences,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.AbsenceEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.AbsenceEntity>>(
              this,
              Invocation.method(
                #fetchAbsences,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.AbsenceEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.MemberEntity>>> fetchMembers() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMembers,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.MemberEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.MemberEntity>>(
          this,
          Invocation.method(
            #fetchMembers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.MemberEntity>>>);
}

/// A class which mocks [CrewmeisterApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrewmeisterApi extends _i1.Mock implements _i8.CrewmeisterApi {
  MockCrewmeisterApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isTest => (super.noSuchMethod(
        Invocation.getter(#isTest),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<List<dynamic>> readJsonFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readJsonFile,
          [path],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);

  @override
  _i4.Future<List<dynamic>> absences() => (super.noSuchMethod(
        Invocation.method(
          #absences,
          [],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);

  @override
  _i4.Future<List<dynamic>> members() => (super.noSuchMethod(
        Invocation.method(
          #members,
          [],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i10.AbsenceModel>> fetchAbsences() => (super.noSuchMethod(
        Invocation.method(
          #fetchAbsences,
          [],
        ),
        returnValue:
            _i4.Future<List<_i10.AbsenceModel>>.value(<_i10.AbsenceModel>[]),
      ) as _i4.Future<List<_i10.AbsenceModel>>);

  @override
  _i4.Future<List<_i11.MemberModel>> fetchMembers() => (super.noSuchMethod(
        Invocation.method(
          #fetchMembers,
          [],
        ),
        returnValue:
            _i4.Future<List<_i11.MemberModel>>.value(<_i11.MemberModel>[]),
      ) as _i4.Future<List<_i11.MemberModel>>);
}
